defmodule Server.Pets.Dog do
  use Server.Schema
  import Ecto.Changeset

  @type t :: %__MODULE__{
          breed: String.t(),
          description: String.t(),
          image_url: String.t()
        }

  @autogenerated_fields ~w(id uid inserted_at updated_at)a

  @create_required_fields ~w(breed description image_url)a

  schema "dogs" do
    field :uid, Ecto.UUID, read_after_writes: true
    field :breed, :string
    field :description, :string
    field :image_url, :string

    timestamps()
  end

  @spec create_changeset(__MODULE__.t(), map) :: Ecto.Changeset.t()
  def create_changeset(dog, attrs) do
    dog
    |> cast(attrs, all_fields() -- @autogenerated_fields)
    |> validate_required(@create_required_fields)
    |> downcase_breed()
    |> unique_constraint(:breed, message: "Breed is already taken")
  end

  @spec all_fields :: list(atom())
  defp all_fields, do: __MODULE__.__schema__(:fields)

  @spec downcase_breed(Changeset.t()) :: Changeset.t()
  defp downcase_breed(changeset) do
    update_change(changeset, :breed, &String.downcase/1)
  end
end
